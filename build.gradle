plugins {
    // Languages
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'

    // Minecraft Tools
    id 'net.minecraftforge.gradle.forge' version '8708bf3e0'

    // Build Tools
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'net.kyori.blossom' version '1.3.0'
}

group 'dev.isxander'
version '1.1.4'

targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = '1.8.9-11.15.1.2318-1.8.9'
    mappings = 'stable_22'
    runDir = 'run'
    makeObfSourceJar = false
}

blossom {
    def evergreenClass = "src/main/kotlin/dev/isxander/particlesenhanced/ParticlesEnhancedInfo.kt"

    replaceToken("__GRADLE_MOD_NAME__", modName, evergreenClass)
    replaceToken("__GRADLE_MOD_ID__", modId, evergreenClass)
    replaceToken("__GRADLE_MOD_DESCRIPTION__", modDescription, evergreenClass)

    replaceToken("__GRADLE_MOD_VERSION__", project.version, evergreenClass)
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spongepowered.org/maven' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://repo.sk1er.club/repository/maven-public' }
}

configurations {
    include
    implementation.extendsFrom include
}

dependencies {
    // Essential
    include 'gg.essential:loader-launchwrapper:1.1.3'
    compileOnly 'gg.essential:essential-1.8.9-forge:1725'

    include ('dev.isXander.kotlin-forge-api:forge-event-dsl:481f620') {
        exclude module: 'kotlin-stdlib-jdk8'
    }
    include ('dev.isXander:XanderLib:1.1.7') {
        exclude module: 'Essential'
    }
    include 'org.bundleproject:libversion:0.0.2'

    compileOnly 'org.spongepowered:mixin:0.8.5-SNAPSHOT'
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT'

    // more essential bullshit
    annotationProcessor 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:6.2'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
}

// more essential bullshit
ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, 'tmp/mixins/mixins.particlesenhanced.refmap.json')
}

jar {
    manifest.attributes (
            'MixinConfigs': 'mixins.particlesenhanced.json',
            'TweakClass': 'gg.essential.loader.stage0.EssentialSetupTweaker'
    )

    enabled = false
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    }
}

processResources {
    inputs.property 'mod_version', project.version
    inputs.property 'mod_id', modId
    inputs.property 'mod_name', modName
    inputs.property 'mod_description', modDescription

    filesMatching('mcmod.info') {
        expand (
                'mod_version': project.version,
                'mod_id': modId,
                'mod_name': modName,
                'mod_description': modDescription
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

shadowJar {
    archiveClassifier.set('')

    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "META-INF/versions/**"

    // essential bullshit
    from files(project.mixinRefMap.canonicalPath)
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
        mappingType = 'SEARGE'
    }
}

reobfJar.dependsOn tasks.shadowJar

// essential bullshit to fix mixins
compileJava {
    options.compilerArgs += [
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/mcp-srg.srg').canonicalPath}"
    ]
}

task copySrg(type: Copy, dependsOn: 'genSrgs') {
    from { project.tasks.genSrgs.mcpToSrg }
    into 'build'
}
compileJava.dependsOn copySrg

reobfJar.addSecondarySrgFile project.mixinSrg
